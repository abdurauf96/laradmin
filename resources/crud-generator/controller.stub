<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use DummyRootNamespace{{modelNamespace}}{{modelName}};
use Illuminate\Contracts\View\View;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class DummyClass extends Controller
{
    public function index(Request $request): View
    {
        $keyword = $request->get('search');
        $perPage = {{pagination}};

        if (!empty($keyword)) {
            ${{crudName}} = {{modelName}}::{{whereSnippet}}latest()->paginate($perPage);
        } else {
            ${{crudName}} = {{modelName}}::latest()->paginate($perPage);
        }

        return view('{{viewPath}}{{viewName}}.index', compact('{{crudName}}'));
    }

    public function create(): View
    {
        return view('{{viewPath}}{{viewName}}.create');
    }

    public function store(Request $request): RedirectResponse
    {
        {{validationRules}}
        $requestData = $request->all();
        {{fileSnippet}}
        {{modelName}}::create($requestData);

        return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} added!');
    }

    public function show({{modelName}} ${{crudNameSingular}}): View
    {
        return view('{{viewPath}}{{viewName}}.show', compact('{{crudNameSingular}}'));
    }

    public function edit({{modelName}} ${{crudNameSingular}}): View
    {
        return view('{{viewPath}}{{viewName}}.edit', compact('{{crudNameSingular}}'));
    }

    public function update(Request $request, {{modelName}} ${{crudNameSingular}}): RedirectResponse
    {
        {{validationRules}}
        $requestData = $request->all();
        {{fileSnippet}}

        ${{crudNameSingular}}->update($requestData);

        return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} updated!');
    }

    public function destroy({{modelName}} ${{crudNameSingular}}): RedirectResponse
    {
        ${{crudNameSingular}}->delete();

        return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} deleted!');
    }
}
